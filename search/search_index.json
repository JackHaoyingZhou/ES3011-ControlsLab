{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PARC \u00b6 Contains Info about the competition","title":"PARC"},{"location":"#parc","text":"Contains Info about the competition","title":"PARC"},{"location":"competition-overview/","text":"Competition Overview \u00b6 [ Motivating image ] Robotics and AI is revolutionizing the what and how we work today and will continue in the future. Today, robots are augmenting the capability of human workers in various industries: logistics, healthcare, agriculture, etc. The PARC Engineers league tasks participants to reimagine how humans can augment the capabilities of intelligent robots in a task of growing prevalence - autonomous parcel delivery. The challenge of the competition is to build software to operate a wheeled mobile robot to complete a delivery task including: navigating through a sidewalk, crossing the road using a crosswalk and navigating in a park to find the drop location. This competition would consist two phases: a simulation phase and a physical robot phase. Simulation Phase \u00b6 In this phase, teams would interact with the delivery robot in simulation (using the Gazebo Robot Simulator). Participants are required to write software to complete three crucial tasks for the operation of a delivery robot: - Sidewalk following (with obstacle avoidance) - Traffic sign detection and recognition - Go-to-goal navigation (with obstacle avoidance) Participating teams can download the complete simulation packages (follow this link) and follow the instruction [here] to set up their PCs and complete the tasks. Teams are required to submit their solutions to the competition drive on or before the Phase 1 deadline. Following team evaluations, teams with the best solutions will qualify to compete in Phase 2. Physical Robot Phase \u00b6 In this phase, the qualified teams get a chance to refine and deploy their software on the physical robot to compete on the main competition day. First, a complete simulation of the competition environment would be provided to teams to integrate and their solutions from Phase 1. The task here is to operate the delivery robot to complete a delivery by moving from parcel pickup location to the drop-off location. Once satisfactory results are achieved in simulation, participants would be allowed to test their software on the physical robot virtually by reserving time on our booking calendar [to be provided]. To be allowed to compete on the final competition, teams must submit a report (including videos of their fully functional solution in simulation) and upload their code for review. How to Participate \u00b6 Prospective teams would be required to complete an online application [add link to online form] by providing the following information: - Team name and affiliation - Team members names - Previous experiences with robotics - A one-page essay on the role of robotics on the future of work in Africa (uploaded as a PDF) Important Dates \u00b6 Event Date Registration Opens February 5th 2021 Registration Deadline February 19th 2021 Phase 1 Qualification Announcement February 26th 2021 Phase 1 Submission Deadline June 1st 2021 Phase 2 Qualification Announcement June 11th 2021 Phase 2 Submission Deadline July 11th 2021 Final Competition Day July 2021","title":"Competition Overview"},{"location":"competition-overview/#competition_overview","text":"[ Motivating image ] Robotics and AI is revolutionizing the what and how we work today and will continue in the future. Today, robots are augmenting the capability of human workers in various industries: logistics, healthcare, agriculture, etc. The PARC Engineers league tasks participants to reimagine how humans can augment the capabilities of intelligent robots in a task of growing prevalence - autonomous parcel delivery. The challenge of the competition is to build software to operate a wheeled mobile robot to complete a delivery task including: navigating through a sidewalk, crossing the road using a crosswalk and navigating in a park to find the drop location. This competition would consist two phases: a simulation phase and a physical robot phase.","title":"Competition Overview"},{"location":"competition-overview/#simulation_phase","text":"In this phase, teams would interact with the delivery robot in simulation (using the Gazebo Robot Simulator). Participants are required to write software to complete three crucial tasks for the operation of a delivery robot: - Sidewalk following (with obstacle avoidance) - Traffic sign detection and recognition - Go-to-goal navigation (with obstacle avoidance) Participating teams can download the complete simulation packages (follow this link) and follow the instruction [here] to set up their PCs and complete the tasks. Teams are required to submit their solutions to the competition drive on or before the Phase 1 deadline. Following team evaluations, teams with the best solutions will qualify to compete in Phase 2.","title":"Simulation Phase"},{"location":"competition-overview/#physical_robot_phase","text":"In this phase, the qualified teams get a chance to refine and deploy their software on the physical robot to compete on the main competition day. First, a complete simulation of the competition environment would be provided to teams to integrate and their solutions from Phase 1. The task here is to operate the delivery robot to complete a delivery by moving from parcel pickup location to the drop-off location. Once satisfactory results are achieved in simulation, participants would be allowed to test their software on the physical robot virtually by reserving time on our booking calendar [to be provided]. To be allowed to compete on the final competition, teams must submit a report (including videos of their fully functional solution in simulation) and upload their code for review.","title":"Physical Robot Phase"},{"location":"competition-overview/#how_to_participate","text":"Prospective teams would be required to complete an online application [add link to online form] by providing the following information: - Team name and affiliation - Team members names - Previous experiences with robotics - A one-page essay on the role of robotics on the future of work in Africa (uploaded as a PDF)","title":"How to Participate"},{"location":"competition-overview/#important_dates","text":"Event Date Registration Opens February 5th 2021 Registration Deadline February 19th 2021 Phase 1 Qualification Announcement February 26th 2021 Phase 1 Submission Deadline June 1st 2021 Phase 2 Qualification Announcement June 11th 2021 Phase 2 Submission Deadline July 11th 2021 Final Competition Day July 2021","title":"Important Dates"},{"location":"getting-started/setting-up-your-pc/","text":"How to setup the Computer \u00b6 This guide helps you setup your computer for running the competition environment locally and developing the code. You can use local Computer/Laptop or Virtual Machine inside your computer or any cloud platform like Google GCP , Amazon AWS , Microsoft Azure , Digital Ocean , etc (All Cloud providers have some free trial plan which you can make use of). System requirements \u00b6 The competition setup needs to be run on Ubuntu , a flavor of Linux . You will need a computer that has: A dedicated GPU , Nvidia cards tend to work well in Ubuntu A CPU that is at least an Intel i5, or equivalent, At least 4GB of free disk space, At least 8GB of RAM, Ubuntu Xenial installed. Operating System \u00b6 If not already installed, Install Ubuntu Bionic (18.04) on the system by following this guide . Note It is highly recommended to install Bionic (18.04) version of Ubuntu due to ROS (Melodic) dependency. Installing ROS \u00b6 You need to install ROS Melodic by following this guide and install ros-melodic-desktop-full in the step 1.4 of the guide.","title":"Setting up your PC"},{"location":"getting-started/setting-up-your-pc/#how_to_setup_the_computer","text":"This guide helps you setup your computer for running the competition environment locally and developing the code. You can use local Computer/Laptop or Virtual Machine inside your computer or any cloud platform like Google GCP , Amazon AWS , Microsoft Azure , Digital Ocean , etc (All Cloud providers have some free trial plan which you can make use of).","title":"How to setup the Computer"},{"location":"getting-started/setting-up-your-pc/#system_requirements","text":"The competition setup needs to be run on Ubuntu , a flavor of Linux . You will need a computer that has: A dedicated GPU , Nvidia cards tend to work well in Ubuntu A CPU that is at least an Intel i5, or equivalent, At least 4GB of free disk space, At least 8GB of RAM, Ubuntu Xenial installed.","title":"System requirements"},{"location":"getting-started/setting-up-your-pc/#operating_system","text":"If not already installed, Install Ubuntu Bionic (18.04) on the system by following this guide . Note It is highly recommended to install Bionic (18.04) version of Ubuntu due to ROS (Melodic) dependency.","title":"Operating System"},{"location":"getting-started/setting-up-your-pc/#installing_ros","text":"You need to install ROS Melodic by following this guide and install ros-melodic-desktop-full in the step 1.4 of the guide.","title":"Installing ROS"},{"location":"phase1-instructions/","text":"Phase 1: Simulation \u00b6 In this phase, teams would interact with the delivery robot in simulation (using the Gazebo Robot Simulator). Participants are required to write software to complete three crucial tasks for the operation of a delivery robot: - Sidewalk following (with obstacle avoidance) - Traffic sign detection and recognition - Go-to-goal navigation (with obstacle avoidance) Task 1: Sidewalk following \u00b6 [Image] Delivery robots need to be able to navigate safely through sidewalks as the move from pick up to drop off locations. In this task, we have simplified the sidewalk following problem by adding lanes to the sidewalk. Hence, teams are required to develop software to navigate the robot within the lanes from start to end position. Bear in mind that along with lane following, the robot would be required to avoid obstacles which may lie in its path. Task Guidelines \u00b6 Goal: Implement software which processes sensory information from the robots sensors (camera and LiDAR) and generates velocity commands to control the robot's motion [see here for details]. Step 1: Review the \"Task 1\" folder in the Github repository. Step 2: Complete the [Setting up your PC] and [Setting up workspace] steps. Step 3: Run the following launch file to bring up the robot in the designated world in a new terminal roslaunch <our-robot-package-name> task1.launch Scoring \u00b6 What to Submit \u00b6 Task 2: Traffic sign detection and recognition \u00b6 Task 3: Go-to-goal navigation \u00b6","title":"Phase 1: Simulation"},{"location":"phase1-instructions/#phase_1_simulation","text":"In this phase, teams would interact with the delivery robot in simulation (using the Gazebo Robot Simulator). Participants are required to write software to complete three crucial tasks for the operation of a delivery robot: - Sidewalk following (with obstacle avoidance) - Traffic sign detection and recognition - Go-to-goal navigation (with obstacle avoidance)","title":"Phase 1: Simulation"},{"location":"phase1-instructions/#task_1_sidewalk_following","text":"[Image] Delivery robots need to be able to navigate safely through sidewalks as the move from pick up to drop off locations. In this task, we have simplified the sidewalk following problem by adding lanes to the sidewalk. Hence, teams are required to develop software to navigate the robot within the lanes from start to end position. Bear in mind that along with lane following, the robot would be required to avoid obstacles which may lie in its path.","title":"Task 1: Sidewalk following"},{"location":"phase1-instructions/#task_guidelines","text":"Goal: Implement software which processes sensory information from the robots sensors (camera and LiDAR) and generates velocity commands to control the robot's motion [see here for details]. Step 1: Review the \"Task 1\" folder in the Github repository. Step 2: Complete the [Setting up your PC] and [Setting up workspace] steps. Step 3: Run the following launch file to bring up the robot in the designated world in a new terminal roslaunch <our-robot-package-name> task1.launch","title":"Task Guidelines"},{"location":"phase1-instructions/#scoring","text":"","title":"Scoring"},{"location":"phase1-instructions/#what_to_submit","text":"","title":"What to Submit"},{"location":"phase1-instructions/#task_2_traffic_sign_detection_and_recognition","text":"","title":"Task 2: Traffic sign detection and recognition"},{"location":"phase1-instructions/#task_3_go-to-goal_navigation","text":"","title":"Task 3: Go-to-goal navigation"},{"location":"phase2-instructions/","text":"How to setup the Computer \u00b6 This guide helps you setup your computer for running the competition environment locally and developing the code. You can use local Computer/Laptop or Virtual Machine inside your computer or any cloud platform like Google GCP , Amazon AWS , Microsoft Azure , Digital Ocean , etc (All Cloud providers have some free trial plan which you can make use of). System requirements \u00b6 The competition setup needs to be run on Ubuntu , a flavor of Linux . You will need a computer that has: A dedicated GPU , Nvidia cards tend to work well in Ubuntu A CPU that is at least an Intel i5, or equivalent, At least 4GB of free disk space, At least 8GB of RAM, Ubuntu Xenial installed. Operating System \u00b6 If not already installed, Install Ubuntu Bionic (18.04) on the system by following this guide . Note It is highly recommended to install Bionic (18.04) version of Ubuntu due to ROS (Melodic) dependency. Installing ROS \u00b6 You need to install ROS Melodic by following this guide and install ros-melodic-desktop-full in the step 1.4 of the guide.","title":"Phase 2: Physical Robot"},{"location":"phase2-instructions/#how_to_setup_the_computer","text":"This guide helps you setup your computer for running the competition environment locally and developing the code. You can use local Computer/Laptop or Virtual Machine inside your computer or any cloud platform like Google GCP , Amazon AWS , Microsoft Azure , Digital Ocean , etc (All Cloud providers have some free trial plan which you can make use of).","title":"How to setup the Computer"},{"location":"phase2-instructions/#system_requirements","text":"The competition setup needs to be run on Ubuntu , a flavor of Linux . You will need a computer that has: A dedicated GPU , Nvidia cards tend to work well in Ubuntu A CPU that is at least an Intel i5, or equivalent, At least 4GB of free disk space, At least 8GB of RAM, Ubuntu Xenial installed.","title":"System requirements"},{"location":"phase2-instructions/#operating_system","text":"If not already installed, Install Ubuntu Bionic (18.04) on the system by following this guide . Note It is highly recommended to install Bionic (18.04) version of Ubuntu due to ROS (Melodic) dependency.","title":"Operating System"},{"location":"phase2-instructions/#installing_ros","text":"You need to install ROS Melodic by following this guide and install ros-melodic-desktop-full in the step 1.4 of the guide.","title":"Installing ROS"},{"location":"setting-up-computer/","text":"How to setup the Computer \u00b6 This guide helps you setup your computer for running the competition environment locally and developing the code. You can use local Computer/Laptop or Virtual Machine inside your computer or any cloud platform like Google GCP , Amazon AWS , Microsoft Azure , Digital Ocean , etc (All Cloud providers have some free trial plan which you can make use of). System requirements \u00b6 The competition setup needs to be run on Ubuntu , a flavor of Linux . You will need a computer that has: A dedicated GPU , Nvidia cards tend to work well in Ubuntu A CPU that is at least an Intel i5, or equivalent, At least 4GB of free disk space, At least 8GB of RAM, Ubuntu Xenial installed. Operating System \u00b6 If not already installed, Install Ubuntu Bionic (18.04) on the system by following this guide . Note It is highly recommended to install Bionic (18.04) version of Ubuntu due to ROS (Melodic) dependency. Installing ROS \u00b6 You need to install ROS Melodic by following this guide and install ros-melodic-desktop-full in the step 1.4 of the guide.","title":"How to setup the Computer"},{"location":"setting-up-computer/#how_to_setup_the_computer","text":"This guide helps you setup your computer for running the competition environment locally and developing the code. You can use local Computer/Laptop or Virtual Machine inside your computer or any cloud platform like Google GCP , Amazon AWS , Microsoft Azure , Digital Ocean , etc (All Cloud providers have some free trial plan which you can make use of).","title":"How to setup the Computer"},{"location":"setting-up-computer/#system_requirements","text":"The competition setup needs to be run on Ubuntu , a flavor of Linux . You will need a computer that has: A dedicated GPU , Nvidia cards tend to work well in Ubuntu A CPU that is at least an Intel i5, or equivalent, At least 4GB of free disk space, At least 8GB of RAM, Ubuntu Xenial installed.","title":"System requirements"},{"location":"setting-up-computer/#operating_system","text":"If not already installed, Install Ubuntu Bionic (18.04) on the system by following this guide . Note It is highly recommended to install Bionic (18.04) version of Ubuntu due to ROS (Melodic) dependency.","title":"Operating System"},{"location":"setting-up-computer/#installing_ros","text":"You need to install ROS Melodic by following this guide and install ros-melodic-desktop-full in the step 1.4 of the guide.","title":"Installing ROS"}]}