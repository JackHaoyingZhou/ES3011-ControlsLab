{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"lab-docs/lab1/","text":"LAB 1: Intro to MATLAB Self-Balancing Robot Setup Introduction Welcome to the first session of the ES3011 experimental labs. Introduction to MATLAB Self-Balancing Robot Setup Learning Outcomes You should be able to: Perform basic linear algebra computations using MATLAB command window Write and run a MATLAB script Use the plot function in MATLAB Use basic control system functions such as tf , ss in MATLAB 1. Introduction to MATLAB In this section, you will get a gentle introduction to MATLAB and how to use it for control systems design and analysis. Instructions: Access the MATLAB Tutorials here [Add link] Read and complete the following exercises: Chapter 1 Chapter 2 Chapter 3 (through Identity Matrix, but skip 3D plotting, multi-dimensional arrays and structures) Create a MATLAB script that does the following: Adds two 3x3 identity matrices and multiplies that result by the vector [1;2;3] Plots the function y = sin(t) from 0 to 10 seconds with labeled axes and a suitable title. Finds the roots of s^4 + 3s^3 - 15s^2 -2s + 9 . Hint: First declare s = tf('s') and use zero(_yourFunction_) to find the roots. 2. Self-Balancing Robot Setup In this section, you will walk through the process of setting up the self-balancing robot and enable your programming environment in MATLAB. Instructions: If you don't have MATLAB, please follow this guide on installing MATLAB. Download and set up Visual Studio Code following this guide . Download Git (with Git Bash) here Calibrating the robot sensors (on-board IMU): The self-balancing robot uses an IMU (inertial measurement unit) for pose measurement. This sensor needs to be calibrated properly. Follow the instructions here What to Submit: Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: MATLAB Publish your script (and its output) as a PDF from MATLAB. Follow this guide to see how to to. Section 2: Self-balancing Robot Setup Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions.","title":"Lab 1"},{"location":"lab-docs/lab1/#lab_1_intro_to_matlab_self-balancing_robot_setup","text":"","title":"LAB 1: Intro to MATLAB &amp; Self-Balancing Robot Setup"},{"location":"lab-docs/lab1/#introduction","text":"Welcome to the first session of the ES3011 experimental labs. Introduction to MATLAB Self-Balancing Robot Setup","title":"Introduction"},{"location":"lab-docs/lab1/#learning_outcomes","text":"You should be able to: Perform basic linear algebra computations using MATLAB command window Write and run a MATLAB script Use the plot function in MATLAB Use basic control system functions such as tf , ss in MATLAB","title":"Learning Outcomes"},{"location":"lab-docs/lab1/#1_introduction_to_matlab","text":"In this section, you will get a gentle introduction to MATLAB and how to use it for control systems design and analysis.","title":"1. Introduction to MATLAB"},{"location":"lab-docs/lab1/#instructions","text":"Access the MATLAB Tutorials here [Add link] Read and complete the following exercises: Chapter 1 Chapter 2 Chapter 3 (through Identity Matrix, but skip 3D plotting, multi-dimensional arrays and structures) Create a MATLAB script that does the following: Adds two 3x3 identity matrices and multiplies that result by the vector [1;2;3] Plots the function y = sin(t) from 0 to 10 seconds with labeled axes and a suitable title. Finds the roots of s^4 + 3s^3 - 15s^2 -2s + 9 . Hint: First declare s = tf('s') and use zero(_yourFunction_) to find the roots.","title":"Instructions:"},{"location":"lab-docs/lab1/#2_self-balancing_robot_setup","text":"In this section, you will walk through the process of setting up the self-balancing robot and enable your programming environment in MATLAB.","title":"2. Self-Balancing Robot Setup"},{"location":"lab-docs/lab1/#instructions_1","text":"If you don't have MATLAB, please follow this guide on installing MATLAB. Download and set up Visual Studio Code following this guide . Download Git (with Git Bash) here Calibrating the robot sensors (on-board IMU): The self-balancing robot uses an IMU (inertial measurement unit) for pose measurement. This sensor needs to be calibrated properly. Follow the instructions here","title":"Instructions:"},{"location":"lab-docs/lab1/#what_to_submit","text":"Prepare a report which contains the following: Introduction: a few sentences to introduce the topic of the lab Section 1: MATLAB Publish your script (and its output) as a PDF from MATLAB. Follow this guide to see how to to. Section 2: Self-balancing Robot Setup Conclusion: a few sentences concluding the report explaining the goals, what you learned, and any other conclusions.","title":"What to Submit:"},{"location":"lab-docs/lab2/","text":"Lab 2: Mathematical Modeling I Introduction Welcome to the second session of the ES3011 experimental labs. Mathematical modeling of basic dynamical systems Mathematical modeling of self-balancing robot system Learning Outcomes You should be able to: Understand and describe the dynamical system using mathematically using differential equations Convert the differential equations to state-space model form by hand and using MATLAB functionality 1. Mathematical Modeling of Basic Dynamical Systems In this section, you will develop mathematical models for basic dynamical systems considered in control systems such as the mass-spring-damper and the DC motor. These models will then be put into state-space representation which will be used in future lab sessions for simulation and analysis. Instructions: In this lab instruction sheet , Review the MATLAB Intro section Complete problems I (Mass-spring-damper) and IV (Motor position) 2. Mathematical Modeling of the Self-Balancing Robot ADD MORE INFORMATION HERE ON MODELING THE ROBOT DYNAMICS","title":"Lab 2"},{"location":"lab-docs/lab2/#lab_2_mathematical_modeling_i","text":"","title":"Lab 2: Mathematical Modeling I"},{"location":"lab-docs/lab2/#introduction","text":"Welcome to the second session of the ES3011 experimental labs. Mathematical modeling of basic dynamical systems Mathematical modeling of self-balancing robot system","title":"Introduction"},{"location":"lab-docs/lab2/#learning_outcomes","text":"You should be able to: Understand and describe the dynamical system using mathematically using differential equations Convert the differential equations to state-space model form by hand and using MATLAB functionality","title":"Learning Outcomes"},{"location":"lab-docs/lab2/#1_mathematical_modeling_of_basic_dynamical_systems","text":"In this section, you will develop mathematical models for basic dynamical systems considered in control systems such as the mass-spring-damper and the DC motor. These models will then be put into state-space representation which will be used in future lab sessions for simulation and analysis.","title":"1. Mathematical Modeling of Basic Dynamical Systems"},{"location":"lab-docs/lab2/#instructions","text":"In this lab instruction sheet , Review the MATLAB Intro section Complete problems I (Mass-spring-damper) and IV (Motor position)","title":"Instructions:"},{"location":"lab-docs/lab2/#2_mathematical_modeling_of_the_self-balancing_robot","text":"ADD MORE INFORMATION HERE ON MODELING THE ROBOT DYNAMICS","title":"2. Mathematical Modeling of the Self-Balancing Robot"},{"location":"lab-docs/lab3/","text":"Lab 3: Laplace Transforms Mathematical Modeling II Description: Learn how to perform laplace transforms on the physical dynamic systems: Mass-spring-damper ~~RLC circuit~~ DC motor Self-balancing robot What to Submit: Report showing a summary of exercises completed by hand as well as with MATLAB.","title":"Lab 3"},{"location":"lab-docs/lab3/#lab_3_laplace_transforms_mathematical_modeling_ii","text":"","title":"Lab 3: Laplace Transforms &amp; Mathematical Modeling II"},{"location":"lab-docs/lab3/#description","text":"Learn how to perform laplace transforms on the physical dynamic systems: Mass-spring-damper ~~RLC circuit~~ DC motor Self-balancing robot","title":"Description:"},{"location":"lab-docs/lab3/#what_to_submit","text":"Report showing a summary of exercises completed by hand as well as with MATLAB.","title":"What to Submit:"},{"location":"lab-docs/lab4/","text":"LAB 4: Transfer Functions Transient Response Description: Learn how to create transfer functions for the physical dynamic systems: Mass-spring-damper DC motor Self-balancing robot Perform open-loop step response (transient response) for each system, especially the self-balancing robot What to Submit: Report showing a summary of exercises completed by hand as well as with MATLAB. MATLAB generated plot of the transient response of each dynamic systems","title":"Lab 4"},{"location":"lab-docs/lab4/#lab_4_transfer_functions_transient_response","text":"","title":"LAB 4: Transfer Functions &amp; Transient Response"},{"location":"lab-docs/lab4/#description","text":"Learn how to create transfer functions for the physical dynamic systems: Mass-spring-damper DC motor Self-balancing robot Perform open-loop step response (transient response) for each system, especially the self-balancing robot","title":"Description:"},{"location":"lab-docs/lab4/#what_to_submit","text":"Report showing a summary of exercises completed by hand as well as with MATLAB. MATLAB generated plot of the transient response of each dynamic systems","title":"What to Submit:"},{"location":"lab-docs/lab5/","text":"LAB 5: Control Design: P, PI, PID Controllers Description: Learn how to develop linear feedback controllers for the self-balancing robot Perform closed-loop step response (transient response) for the self-balancing robot What to Submit: Report showing a summary of exercises completed by hand as well as with MATLAB. MATLAB generated plot of the transient response for the self-balancing robot","title":"Lab 5"},{"location":"lab-docs/lab5/#lab_5_control_design_p_pi_pid_controllers","text":"","title":"LAB 5: Control Design: P, PI, PID Controllers"},{"location":"lab-docs/lab5/#description","text":"Learn how to develop linear feedback controllers for the self-balancing robot Perform closed-loop step response (transient response) for the self-balancing robot","title":"Description:"},{"location":"lab-docs/lab5/#what_to_submit","text":"Report showing a summary of exercises completed by hand as well as with MATLAB. MATLAB generated plot of the transient response for the self-balancing robot","title":"What to Submit:"},{"location":"lab-docs/lab6/","text":"LAB 6: Stability Analysis Frequency Response Description: Learn how to analyze stability and frequency responses with Bode plots for the self-balancing robot Learn how to reduce steady-state error Learn how to create a lag compensator What to Submit: Report showing a summary of exercises completed by hand as well as with MATLAB.","title":"Lab 6"},{"location":"lab-docs/lab6/#lab_6_stability_analysis_frequency_response","text":"","title":"LAB 6: Stability Analysis &amp; Frequency Response"},{"location":"lab-docs/lab6/#description","text":"Learn how to analyze stability and frequency responses with Bode plots for the self-balancing robot Learn how to reduce steady-state error Learn how to create a lag compensator","title":"Description:"},{"location":"lab-docs/lab6/#what_to_submit","text":"Report showing a summary of exercises completed by hand as well as with MATLAB.","title":"What to Submit:"},{"location":"lab-docs/lab7/","text":"LAB 7: Controller Tuning Final Competition Description: What to Submit:","title":"Lab 7"},{"location":"lab-docs/lab7/#lab_7_controller_tuning_final_competition","text":"","title":"LAB 7: Controller Tuning &amp; Final Competition"},{"location":"lab-docs/lab7/#description","text":"","title":"Description:"},{"location":"lab-docs/lab7/#what_to_submit","text":"","title":"What to Submit:"},{"location":"lab-overview/","text":"Lab Overview Welcome to the ES3011 Experimental Lab Documentation! Lab# Title Description 1 Intro to MATLAB Self-Balancing Robot Setup 2 Mathematical Modeling I 3 Laplace Transforms Mathematical Modeling II 4 Transfer Functions Transient Response 5 Control Design: P, PI, PID Controllers 6 Stability Analysis Frequency Response 7 Controller Tuning Final Competition Note Resources: - Control Tutorials for MATLAB Simulink - Paper 1: Wheel synchronizer for 2-wheeled self-balancing robot - Paper 2: Learning objectives for UG control system labs - Paper 3: IJEE 2020 paper on LEGO Mindstorm - Paper 4: Report on modeling an InvPend","title":"Lab Overview"},{"location":"lab-overview/#lab_overview","text":"Welcome to the ES3011 Experimental Lab Documentation! Lab# Title Description 1 Intro to MATLAB Self-Balancing Robot Setup 2 Mathematical Modeling I 3 Laplace Transforms Mathematical Modeling II 4 Transfer Functions Transient Response 5 Control Design: P, PI, PID Controllers 6 Stability Analysis Frequency Response 7 Controller Tuning Final Competition Note Resources: - Control Tutorials for MATLAB Simulink - Paper 1: Wheel synchronizer for 2-wheeled self-balancing robot - Paper 2: Learning objectives for UG control system labs - Paper 3: IJEE 2020 paper on LEGO Mindstorm - Paper 4: Report on modeling an InvPend","title":"Lab Overview"}]}